* 디자인 원칙
    1. 애플리케이션에서 달라지는 부분을 찾아내고 달라지지 않는 부분과 분리한다.
    2. 구현보다는 인터페이스에 맞춰서 프로그래밍한다.
    3. 상속보다는 구성을 활용한다.

    *느슨한 결합 => 객체들이 상호작용할 수는 있지만, 서로르 잘 모르는 관계
        1. 주제는 옵저버가 특정 인터페이스를 구현한다는 사실만 앎
        2. 옵저버는 언제든지 새로 추가할 수 있음
        3. 새로운 형식의 옵저버를 추가할 때도 주제를 변경할 필요가 전혀 없음
        4. 주제와 옵저버는 서로 독립적으로 재사용할 수 있음
        5. 주제나 옵저버가 달라져도 서로에게 영향을 미치지는 않음

    4. 상호작용하는 객체 사이에는 가능하면 느슨한 결합을 사용해야 함
    5. 클래스는 확장에는 열려 있어야 하지만 변경에는 닫혀 있어야 함
    6. 추상화된 것에 의존하게 만들고 구상 클래스에 의존하지 않게 만들어야 함
