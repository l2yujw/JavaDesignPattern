*디자인 패턴

    * 패턴 - 특정 컨텍스트 내에서 주어진 문제의 해결책
        * 컨텍스트 - 패턴이 적용되는 상황
        * 문제 - 컨텍스트 내에서 이뤄야 하는 목표를 뜻함
        * 해결책 - 제약조건 속에서 누가 적용해도 목표를 이룰 수 있는 일반적인 디자인

    * 생성패턴
        1. 싱클턴
        2. 추상팩토리
        3. 팩토리 메서드
        4. 프로토타입
        5. 빌더

    * 구조
        1. 데코레이터
        2. 프록시
        3. 퍼사드
        4. 컴포지트
        5. 어댑터
        6. 플라이웨이트
        7. 브리지

    * 행동
        1. 템플릿 메소드
        2. 싱글턴
        3. 반복자
        4. 옵저버
        5. 상태
        6. 전략
        7. 비지터
        8. 중재자
        9. 인터프리터
        10. 메멘토


    -------------------
    * 클래스
        1. 템플릿 메소드
        2. 펙토리 메소드
        3. 어댑터
        4. 인터프리터

    *객체
        - (나머지)

* 패턴으로 생각하기
    1. 최대한 단순하게
        -> 이 문제에 어떻게 패턴을 적용할 수 있을까가 아니라 어떻게 하면 단순한게 해결할 수 있을까에 초점을 맞춰야함

    2. 디자인 패턴은 만병통치약이 아님
        -> 패턴을 사용할 때는 그 패턴이 설꼐한 디자인에 미칠 영향과 결과를 주의 깊게 생각해 봐야 함

    3. 패턴이 필요할 때
        -> 디자인상의 문제에 적합하다는 확신이 든다면 패턴을 도입해야 함

    4. 리팩토링
        -> 구조개선

    5. 꼭 필요하지 않은 패턴은 빼 버리자. 지금 디자인에서 디자인 패턴을 제거하는 일을 두려워하지 말아야 함

    6. 꼭 필요하지 않은 패턴을 미리 적용할 필요는 없음
